# 用户名user nginx nginx 
user nginx nginx;

# 启动进程，通常设置成和CPU数量相等
worker_processes auto; 
worker_cpu_affinity auto;
# 一个nginx进程打开最大文件数
worker_rlimit_nofile 65535;

# 全局错误日志和pid
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


# 工作模式及连接上限
events {
    # epoll 是多路复用I/的一种方式，可以大大提高nginx性能
    use epoll;
    # 单个后台worker process进程的最大并发连接数（最大连接数 = 连接数 * 进程数）
    worker_connections  65535;
    # 尽可能接收请求
    multi_accept on;
}
	
# 设定HTTP服务器，利用它的反向代理功能提供负载均衡支持
http {
    # 设定MIME类型，类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 设定日志格式
    access_log  /var/log/nginx/log/nginx/access.log;

    sendfile        on;
    #tcp_nopush     on;

    # keepalive 超时时间，客户端到服务器端端连接持续有效时间
    keepalive_timeout  65;
   
    # 提高数据的实时响应性
    tcp_nodelay on;

    # 开启压缩
    gzip on;
    gzip_min_length 1KB;
    gzip_buffers 4 16KB;
    gzip_http_version 1.1;
    gzip_comp_level 2; # 压缩级别大小，最大为9，值越小，压缩后比例越小，cpu处理越快
    gzip_types text/plain application/x - javascript text/css application/xml;
    gzip_vary on;
    
    # 允许客户端请求的最大单文件字节数
    client_max_body_size 100MB;
    # 缓冲区代理缓冲用户端请求的最大字节数
    proxy_connect_timeout 90;
    # Nginx跟后端服务器连接超时时间
    proxy_send_timeout 90;
    # 后端服务器数据回传时间
    proxy_read_timeout 90;
    
    proxy_buffer_size 4KB;
    proxy_buffers 4 32KB;
    proxy_busy_buffers_size 64KB;
    large_client_header_buffers 4 4KB;
    client_header_buffer_size 4KB;
    open_file_cache max = 65535 inactive = 20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 1;
    

    include /etc/nginx/conf.d/*.conf;

}
